answers for the https://www.katacoda.com/liptanbiswas/courses/ckad-practice-challenges/core-concepts

-Core Concepts
1- kubectl create ns frontend
2- kubectl run nginx --image=nginx --restart=Never -n frontend
3- kubectl get pods -n kube-system > /root/kube-system-pods.txt
4- kubectl get services --all-namespaces > /root/all-services.txt
5- kubectl run hello --image=busybox --restart=Never -- echo "Hello World"
6- kubectl run mypodx --image=redis --dry-run=client -oyaml > /root/mypodx.yaml

-Configuration
1- kubectl create ns datatab
kubectl create cm my-config -n datatab --from-literal=confa=exvalue
2- kubectl run al-pod --image=redis --restart=Never --dry-run=client -oyaml > 2.yaml
vi 2.yaml
cat 2.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: al-pod
  name: al-pod
spec:
  containers:
  - image: redis
    name: al-pod
    env:
    - name: AL_USER
      valueFrom:
        configMapKeyRef:
          name: al-conf
          key: al-user
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
kubectl apply -f 2.yaml
3- kubectl run secure-pod --image=redis --restart=Never --dry-run=client -oyaml > 3.yaml
vi 3.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: secure-pod
  name: secure-pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 2000
  containers:
  - image: redis
    name: secure-pod
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
kubectl apply -f 3.yaml
4- kubectl run limited-pod --image=busybox --requests='memory=100Mi' --limits='memory=200Mi' --dry-run=client -oyaml >/root/limited-pod.yaml
cat /root/limited-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: limited-pod
  name: limited-pod
spec:
  containers:
  - image: busybox
    name: limited-pod
    resources:
      limits:
        memory: 200Mi
      requests:
        memory: 100Mi
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
5- kubectl create secret generic db-secret --from-literal=MYSQL_ROOT_PASSWORD=YoYoSecret --from-literal=MYSQL_PASSWORD=XoXoPassword
kubectl create configmap db-config --from-literal=MYSQL_USER=k8s --from-literal=MYSQL_DATABASE=newdTABASE=newdb
kubectl run mydb --image=mysql:5.7 --dry-run=client --restart=Never -oyaml > 5.yaml
cat 5.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: mydb
  name: mydb
spec:
  containers:
  - image: mysql:5.7
    name: mydb
    envFrom:
    - configMapRef:
        name: db-config
    - secretRef:
        name: db-secret
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
kubectl apply -f 5.yaml
6- kubectl create sa namaste
kubectl run yo-namaste --image=nginx --serviceaccount=namaste

-Multi-container Pods
1- kubectl run mp-hello --image=alpine --dry-run=client --restart=Never -oyaml > 1.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: mp-hello
  name: mp-hello
spec:
  containers:
  - image: consul:1.8
    name: consul
  - image: nginx
    name: nginx
  - image: alpine
    name: alpine
    args:
      - sleep
      - infinity
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

-Observability
1- kubectl run myredis --image=redis --dry-run=client --restart=Never -oyaml > 1.yaml
vi 1.yaml
kubectl explain pod.spec.containers.livenessProbe
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: myredis
  name: myredis
spec:
  containers:
  - image: redis
    name: myredis
    livenessProbe:
      exec:
        command:
          - redis-cli
          - PING
      initialDelaySeconds: 5
    readinessProbe:
      exec:
        command:
          - redis-cli
          - PING
      initialDelaySeconds: 5
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
kubectl apply -f 1.yaml
2- kubectl explain pod.spec.containers.readinessProbe.httpGet
kubectl run httptest --image=kennethreitz/httpbin --dry-run=client --restart=Never -oyaml > 2.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: httptest
  name: httptest
spec:
  containers:
  - image: kennethreitz/httpbin
    name: httptest
    readinessProbe:
      httpGet:
        path: /status/200
        port: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
kubectl apply -f 2.yaml
3- kubectl run myenv --image=alpine --restart=Never -- sh -c "printenv && sleep 1h"
kubectl logs myenv > /root/myenv.log
kubectl delete pod myenv
4- kubectl describe pod tatooine
kubectl get pod tatooine -oyaml > 4.yaml
kubectl delete po tatooine --grace-period=0 --force
kubectl apply -f 4.yaml
5- kubectl create sa non-default-sa
kubectl apply -f /root/coruscant.yaml
6- kubectl top pod --all-namespaces
vi /root/high-cpu.yaml

-Pod Design
1- kubectl create ns planets
kubectl create deploy hoth --image=httpd -n planets
kubectl scale deployment/hoth --replicas=4 -n planets
kubectl set image deploy hoth httpd=httpd:2.4.46 -n planets
2- kubectl rollout undo deploy yavin
kubectl get deploy yavin -ojson > /root/yavin.json
3- kubectl autoscale deploy naboo --name=naboo --min=2 --max=5 --cpu-percent=80
4- kubectl create cronjob bespin --image=alpine --schedule='*/5 * * * *' -- date
5- kubectl label node node01 shuttle=true
kubectl annotate nodes node01 flagship-
6- kubectl get pods -n skywalker -l jedi=true -ojsonpath="{range .items[*]}{.metadata.name},{.spec.containers[0].image}{'\n'}{end}" > /root/jedi-true.txt

-Service & Networking








