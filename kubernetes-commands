Kubernetes:
alias k=kubectl
kubectl:

Install latest kubernetes kubectl:
>curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"

If you want to install a specific version:
>curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/darwin/amd64/kubectl

Change permissions:
>chmod +x ./kubectl

Move the kubectl binary to path:
>sudo mv ./kubectl /usr/local/bin/kubectl

Ensure that you have the latest version installed:
>kubectl version --client
Client Version: version.Info{Major:"1", Minor:"18", GitVersion:"v1.18.2", GitCommit:"52c56ce7a8272c798dbc29846288d7cd9fbae032", GitTreeState:"clean", BuildDate:"2020-04-16T11:56:40Z", GoVersion:"go1.13.9", Compiler:"gc", Platform:"darwin/amd64"}

Enabling shell autocompletion for kubectl:
Ensure that bash version installed then Bash 4.1+
>echo $BASH_VERSION or >bash --version
>kubectl completion bash

Enable kubectl autocompletion:
>echo 'source <(kubectl completion bash)' >>~/.bash_profile
>kubectl completion bash >/usr/local/etc/bash_completion.d/kubectl

#Install Minikube
#Minikube, a tool that runs a single-node Kubernetes cluster in a virtual machine on your personal computer.

# Install Homebrew if it is not installed
>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

>brew install minikube

or

>curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \
   && chmod +x minikube

#Add minikube to path
>sudo mv minikube /usr/local/bin

#Download VirtualBox and run with Minikube driver
>minikube start --driver=virtualbox

>minikube status

minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

#stop your cluster
>minikube stop

#if you installed Minikube
>minikube start

#delete Minikube local state
>minikube delete

>kubectl config view
>minikube dashboard

#Install dashboard
>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml

#Make dashboard available
>kubectl proxy

You can access the dashboard at http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/

#Create user https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md
>touch dashboard-adminuser.yaml
>vi dashboard-adminuser.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard

>kubectl apply -f dashboard-adminuser.yaml
serviceaccount/admin-user created

>touch dashboard-adminuser-ClusterRoleBinding.yaml
>vi dashboard-adminuser-ClusterRoleBinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard

>kubectl apply -f dashboard-adminuser-ClusterRoleBinding.yaml
clusterrolebinding.rbac.authorization.k8s.io/admin-user created

#create token
>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')

Name:         admin-user-token-lx2qz
Namespace:    kubernetes-dashboard
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: eb95eea9-543d-4968-a749-6048205eba6b

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  20 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Im9DbDkzZlR4Z05fa2tsSkhKTW5XX0gyeF9iVHZ2cmlXRkJYeVhiU3FLTmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWx4MnF6Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJlYjk1ZWVhOS01NDNkLTQ5NjgtYTc0OS02MDQ4MjA1ZWJhNmIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.SiyjMFiRRdbkULFe7HUrFMAFgj-3XSPPIPlKFFAPTtnOB61z5ySMtzJsqjKCEWOMbFReESfDxVeGVS83tC8UO1jjZmDdROYqh3f-cQhsHs0GvRwyOn0EBmL7286txehu_R4YAAkKYm79P8yWtjpfBhogeTMf9ka94ezKqo6pmzhPDPH6E3KBanYVSA2LnOQkfZqqalry6U1_v0DXffskh6P0_rTqtN1SyQnrGc-sJpr-8dHwc-zN4E_rGC1e6hLo04TpHOI0tYc0s0GQ9Ceuwn6Yx5WklQyYK0szlQNjcahe9OPHu_9PSb5DoN19H0ZdcxpN6hQWAt72g9JY1015eg

#kubectl commands
#resource specification
>kubectl api-resources
>kubectl explain deployment | less
>kubectl explain deployment.spec | less
>kubectl explain deployment.spec.template | less
>kubectl explain deployment.spec --recursive

#custom column format
kubectl get pods \
  -o custom-columns='NAME:metadata.name,NODE:spec.nodeName'

>kubectl run --help

Kubectl shell autocompletion
>kubectl completion zsh
>echo 'source <(kubectl completion zsh)' >>~/.zshrc
>echo 'alias k=kubectl' >>~/.zshrc
>echo 'complete -F __start_kubectl k' >>~/.zshrc
>source ~/.zshrc